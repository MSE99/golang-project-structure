//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Foo = newFooTable("", "foo", "")

type fooTable struct {
	sqlite.Table

	// Columns
	Username sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type FooTable struct {
	fooTable

	EXCLUDED fooTable
}

// AS creates new FooTable with assigned alias
func (a FooTable) AS(alias string) *FooTable {
	return newFooTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FooTable with assigned schema name
func (a FooTable) FromSchema(schemaName string) *FooTable {
	return newFooTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FooTable with assigned table prefix
func (a FooTable) WithPrefix(prefix string) *FooTable {
	return newFooTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FooTable with assigned table suffix
func (a FooTable) WithSuffix(suffix string) *FooTable {
	return newFooTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFooTable(schemaName, tableName, alias string) *FooTable {
	return &FooTable{
		fooTable: newFooTableImpl(schemaName, tableName, alias),
		EXCLUDED: newFooTableImpl("", "excluded", ""),
	}
}

func newFooTableImpl(schemaName, tableName, alias string) fooTable {
	var (
		UsernameColumn = sqlite.StringColumn("username")
		allColumns     = sqlite.ColumnList{UsernameColumn}
		mutableColumns = sqlite.ColumnList{UsernameColumn}
		defaultColumns = sqlite.ColumnList{}
	)

	return fooTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Username: UsernameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
